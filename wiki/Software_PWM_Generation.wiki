{{{// i use timer 0 for example it runs with default settings at 976Hz
// and it resolution is 8 bit (0-255)

int duty_time = 200; // 200 will give at 488hz a PPM value of 1600us

void setup(){
  pinMode(13,OUTPUT); // set pin 13 to output

  TCCR0A = 0; // clear timer 0's TCCRnA register so it works in normal counting mode

  TIMSK0 |= (1<<OCIE0A); // set timer interrupt mask register to Enable CTC interrupt with timer 0's comperator A
}

// this is the interrupts "loop" for the comperator A of timer 0
// it is called everytime the comperator A reaches its loaded value (it counts from 0 to 255 with 488Hz)

// the register for timer 0's comperator A is OCR0A
ISR(TIMER0_COMPA_vect){
  static uint8_t state = 0; // we need 4 states .. two high and two low to have a 488Hz Frequency

  if (state == 0){

    PORTB |= (1<<5); // set pin 13 high 
     
    OCR0A += duty_time;// load the rigister with the duty time .. the interrupt loop will be called again if this time is over

    state = 1; 
  
  }else if(state == 1){
    OCR0A += duty_time;// load it again because we simulate a fast PWM mode
    state = 2;// set the state to 2 because in the next call we need to set the low time
  }else if(state == 2){

    PORTB &= ~(1<<5);// set the pins state to low

    OCR0A += 255-duty_time;// now we neet to wait for the reminding time to dont have just a high signal

    state = 3;
  }else if(state == 3){
    OCR0A += 255-duty_time;// load it again because we simulate a fast PWM mode
    state = 0; // set the state to 0 so it starts again
  }
}

void loop(){
  // the loop isnt needed for this method
}
}}}